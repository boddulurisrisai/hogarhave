{"ast":null,"code":"var _jsxFileName = \"/Users/srisaibodduluri/Desktop/EWA/Assignment2/frontend/src/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [orders, setOrders] = useState(() => JSON.parse(localStorage.getItem('orders')) || []);\n  const [customerInfo, setCustomerInfo] = useState({});\n  const [storeLocations, setStoreLocations] = useState([]);\n\n  // Fetch store locations from the API\n  useEffect(() => {\n    const fetchStoreLocations = async () => {\n      try {\n        const response = await axios.get('http://localhost:3030/api/stores');\n        setStoreLocations(response.data);\n      } catch (error) {\n        console.error('Error fetching store locations:', error);\n      }\n    };\n    fetchStoreLocations();\n  }, []);\n\n  // Function to add an item to the cart\n  const addToCart = (product, quantity = 1) => {\n    console.log(\"Adding product to cart:\", product); // Log product details\n    console.log(\"Image URL:\", product.image); // Log the image URL to check correctness\n\n    const existingItem = cart.find(item => item.id === product.id);\n    if (existingItem) {\n      setCart(prevCart => prevCart.map(item => item.id === product.id ? {\n        ...item,\n        quantity: item.quantity + quantity\n      } : item));\n    } else {\n      setCart(prevCart => [...prevCart, {\n        ...product,\n        quantity\n      }]);\n    }\n  };\n\n  // Function to remove an item from the cart\n  const removeFromCart = productId => {\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\n  };\n\n  // Function to update item quantity in the cart\n  const updateItemQuantity = (productId, quantity) => {\n    setCart(prevCart => prevCart.map(item => item.id === productId ? {\n      ...item,\n      quantity: Math.max(quantity, 1)\n    } : item));\n  };\n\n  // Function to clear the cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Function to handle checkout\n  const checkout = async customerData => {\n    const totalAmount = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    const order = {\n      id: new Date().getTime(),\n      items: cart,\n      totalAmount,\n      ...customerData,\n      confirmationNumber: Math.floor(Math.random() * 1000000),\n      deliveryDate: new Date(new Date().setDate(new Date().getDate() + 14))\n    };\n    try {\n      // Save order to database\n      await axios.post('http://localhost:3030/api/orders', order);\n      // Update local state\n      const updatedOrders = [...orders, order];\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      setOrders(updatedOrders);\n      clearCart();\n    } catch (error) {\n      console.error('Error saving order:', error);\n    }\n  };\n\n  // Function to cancel an order\n  const cancelOrder = orderId => {\n    const updatedOrders = orders.filter(order => order.id !== orderId);\n    localStorage.setItem('orders', JSON.stringify(updatedOrders));\n    setOrders(updatedOrders);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      orders,\n      customerInfo,\n      storeLocations,\n      addToCart,\n      removeFromCart,\n      updateItemQuantity,\n      clearCart,\n      checkout,\n      cancelOrder,\n      setCustomerInfo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook to use the CartContext\n_s(CartProvider, \"Y/R1MTkCQ0IjeEmHwr6qpgUOIcE=\");\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","orders","setOrders","JSON","parse","localStorage","getItem","customerInfo","setCustomerInfo","storeLocations","setStoreLocations","fetchStoreLocations","response","get","data","error","console","addToCart","product","quantity","log","image","existingItem","find","item","id","prevCart","map","removeFromCart","productId","filter","updateItemQuantity","Math","max","clearCart","checkout","customerData","totalAmount","reduce","total","price","order","Date","getTime","items","confirmationNumber","floor","random","deliveryDate","setDate","getDate","post","updatedOrders","setItem","stringify","cancelOrder","orderId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/srisaibodduluri/Desktop/EWA/Assignment2/frontend/src/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CartContext = createContext();\n\nexport function CartProvider({ children }) {\n  const [cart, setCart] = useState([]);\n  const [orders, setOrders] = useState(() => JSON.parse(localStorage.getItem('orders')) || []);\n  const [customerInfo, setCustomerInfo] = useState({});\n  const [storeLocations, setStoreLocations] = useState([]);\n\n  // Fetch store locations from the API\n  useEffect(() => {\n    const fetchStoreLocations = async () => {\n      try {\n        const response = await axios.get('http://localhost:3030/api/stores');\n        setStoreLocations(response.data);\n      } catch (error) {\n        console.error('Error fetching store locations:', error);\n      }\n    };\n\n    fetchStoreLocations();\n  }, []);\n\n  // Function to add an item to the cart\n  const addToCart = (product, quantity = 1) => {\n    console.log(\"Adding product to cart:\", product); // Log product details\n    console.log(\"Image URL:\", product.image);        // Log the image URL to check correctness\n\n    const existingItem = cart.find(item => item.id === product.id);\n    if (existingItem) {\n      setCart(prevCart =>\n        prevCart.map(item =>\n          item.id === product.id ? { ...item, quantity: item.quantity + quantity } : item\n        )\n      );\n    } else {\n      setCart(prevCart => [...prevCart, { ...product, quantity }]);\n    }\n  };\n\n  // Function to remove an item from the cart\n  const removeFromCart = (productId) => {\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\n  };\n\n  // Function to update item quantity in the cart\n  const updateItemQuantity = (productId, quantity) => {\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.id === productId ? { ...item, quantity: Math.max(quantity, 1) } : item\n      )\n    );\n  };\n\n  // Function to clear the cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Function to handle checkout\n  const checkout = async (customerData) => {\n    const totalAmount = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    const order = {\n      id: new Date().getTime(),\n      items: cart,\n      totalAmount,\n      ...customerData,\n      confirmationNumber: Math.floor(Math.random() * 1000000),\n      deliveryDate: new Date(new Date().setDate(new Date().getDate() + 14)),\n    };\n\n    try {\n      // Save order to database\n      await axios.post('http://localhost:3030/api/orders', order);\n      // Update local state\n      const updatedOrders = [...orders, order];\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      setOrders(updatedOrders);\n      clearCart();\n    } catch (error) {\n      console.error('Error saving order:', error);\n    }\n  };\n\n  // Function to cancel an order\n  const cancelOrder = (orderId) => {\n    const updatedOrders = orders.filter(order => order.id !== orderId);\n    localStorage.setItem('orders', JSON.stringify(updatedOrders));\n    setOrders(updatedOrders);\n  };\n\n  return (\n    <CartContext.Provider value={{\n      cart,\n      orders,\n      customerInfo,\n      storeLocations,\n      addToCart,\n      removeFromCart,\n      updateItemQuantity,\n      clearCart,\n      checkout,\n      cancelOrder,\n      setCustomerInfo,\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\n// Custom hook to use the CartContext\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}