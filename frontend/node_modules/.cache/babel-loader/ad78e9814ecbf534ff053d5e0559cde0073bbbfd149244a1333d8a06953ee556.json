{"ast":null,"code":"var _jsxFileName = \"/Users/srisaibodduluri/Desktop/EWA/Assignment2/frontend/src/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the CartContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the CartContext\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n\n// CartProvider component to provide context values\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [deliveryOption, setDeliveryOption] = useState('store-pickup');\n  useEffect(() => {\n    // Calculate the total amount whenever cart changes\n    const newTotalAmount = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    setTotalAmount(newTotalAmount);\n  }, [cart]);\n\n  // Function to add an item to the cart\n  const addToCart = (product, quantity = 1) => {\n    const existingItem = cart.find(item => item.id === product.id);\n    if (existingItem) {\n      setCart(prevCart => prevCart.map(item => item.id === product.id ? {\n        ...item,\n        quantity: item.quantity + quantity\n      } : item));\n    } else {\n      setCart(prevCart => [...prevCart, {\n        ...product,\n        quantity\n      }]);\n    }\n  };\n\n  // Function to remove an item from the cart\n  const removeFromCart = productId => {\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\n  };\n\n  // Function to update item quantity in the cart\n  const updateItemQuantity = (productId, quantity) => {\n    setCart(prevCart => prevCart.map(item => item.id === productId ? {\n      ...item,\n      quantity: Math.max(quantity, 1)\n    } : item));\n  };\n\n  // Function to clear the cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Function to handle checkout\n  const checkout = async customerData => {\n    const orderDetails = {\n      items: cart.map(item => ({\n        orderId: new Date().getTime(),\n        // Replace with your order ID generation logic\n        productId: item.id,\n        name: item.name,\n        image: item.image,\n        price: item.price,\n        quantity: item.quantity\n      })),\n      totalAmount: totalAmount.toFixed(2),\n      deliveryOption,\n      createdAt: new Date().toISOString()\n    };\n    try {\n      // Make a POST request to store the order in MySQL\n      const response = await axios.post('http://localhost:3030/api/cart', orderDetails);\n      if (response.status === 200 || response.status === 201) {\n        clearCart(); // Clear the cart after successful checkout\n      }\n    } catch (error) {\n      console.error('Error saving order:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      totalAmount,\n      deliveryOption,\n      addToCart,\n      removeFromCart,\n      updateItemQuantity,\n      clearCart,\n      setDeliveryOption,\n      checkout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"grPCcitz/zBDyC7BABx4R/Ugxkk=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cart","setCart","totalAmount","setTotalAmount","deliveryOption","setDeliveryOption","newTotalAmount","reduce","total","item","price","quantity","addToCart","product","existingItem","find","id","prevCart","map","removeFromCart","productId","filter","updateItemQuantity","Math","max","clearCart","checkout","customerData","orderDetails","items","orderId","Date","getTime","name","image","toFixed","createdAt","toISOString","response","post","status","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/srisaibodduluri/Desktop/EWA/Assignment2/frontend/src/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the CartContext\nconst CartContext = createContext();\n\n// Custom hook to use the CartContext\nexport const useCart = () => {\n  return useContext(CartContext);\n};\n\n// CartProvider component to provide context values\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [deliveryOption, setDeliveryOption] = useState('store-pickup');\n\n  useEffect(() => {\n    // Calculate the total amount whenever cart changes\n    const newTotalAmount = cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    setTotalAmount(newTotalAmount);\n  }, [cart]);\n\n  // Function to add an item to the cart\n  const addToCart = (product, quantity = 1) => {\n    const existingItem = cart.find(item => item.id === product.id);\n    if (existingItem) {\n      setCart(prevCart =>\n        prevCart.map(item =>\n          item.id === product.id ? { ...item, quantity: item.quantity + quantity } : item\n        )\n      );\n    } else {\n      setCart(prevCart => [...prevCart, { ...product, quantity }]);\n    }\n  };\n\n  // Function to remove an item from the cart\n  const removeFromCart = (productId) => {\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\n  };\n\n  // Function to update item quantity in the cart\n  const updateItemQuantity = (productId, quantity) => {\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.id === productId ? { ...item, quantity: Math.max(quantity, 1) } : item\n      )\n    );\n  };\n\n  // Function to clear the cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Function to handle checkout\n  const checkout = async (customerData) => {\n    const orderDetails = {\n      items: cart.map(item => ({\n        orderId: new Date().getTime(), // Replace with your order ID generation logic\n        productId: item.id,\n        name: item.name,\n        image: item.image,\n        price: item.price,\n        quantity: item.quantity,\n      })),\n      totalAmount: totalAmount.toFixed(2),\n      deliveryOption,\n      createdAt: new Date().toISOString(),\n    };\n\n    try {\n      // Make a POST request to store the order in MySQL\n      const response = await axios.post('http://localhost:3030/api/cart', orderDetails);\n      if (response.status === 200 || response.status === 201) {\n        clearCart(); // Clear the cart after successful checkout\n      }\n    } catch (error) {\n      console.error('Error saving order:', error);\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        totalAmount,\n        deliveryOption,\n        addToCart,\n        removeFromCart,\n        updateItemQuantity,\n        clearCart,\n        setDeliveryOption,\n        checkout,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAOR,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;;AAED;AAAAE,EAAA,CAJaD,OAAO;AAKpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,cAAc,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,cAAc,GAAGN,IAAI,CAACO,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;IAC1FR,cAAc,CAACG,cAAc,CAAC;EAChC,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMY,SAAS,GAAGA,CAACC,OAAO,EAAEF,QAAQ,GAAG,CAAC,KAAK;IAC3C,MAAMG,YAAY,GAAGd,IAAI,CAACe,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACO,EAAE,KAAKH,OAAO,CAACG,EAAE,CAAC;IAC9D,IAAIF,YAAY,EAAE;MAChBb,OAAO,CAACgB,QAAQ,IACdA,QAAQ,CAACC,GAAG,CAACT,IAAI,IACfA,IAAI,CAACO,EAAE,KAAKH,OAAO,CAACG,EAAE,GAAG;QAAE,GAAGP,IAAI;QAAEE,QAAQ,EAAEF,IAAI,CAACE,QAAQ,GAAGA;MAAS,CAAC,GAAGF,IAC7E,CACF,CAAC;IACH,CAAC,MAAM;MACLR,OAAO,CAACgB,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAE;QAAE,GAAGJ,OAAO;QAAEF;MAAS,CAAC,CAAC,CAAC;IAC9D;EACF,CAAC;;EAED;EACA,MAAMQ,cAAc,GAAIC,SAAS,IAAK;IACpCnB,OAAO,CAACgB,QAAQ,IAAIA,QAAQ,CAACI,MAAM,CAACZ,IAAI,IAAIA,IAAI,CAACO,EAAE,KAAKI,SAAS,CAAC,CAAC;EACrE,CAAC;;EAED;EACA,MAAME,kBAAkB,GAAGA,CAACF,SAAS,EAAET,QAAQ,KAAK;IAClDV,OAAO,CAACgB,QAAQ,IACdA,QAAQ,CAACC,GAAG,CAACT,IAAI,IACfA,IAAI,CAACO,EAAE,KAAKI,SAAS,GAAG;MAAE,GAAGX,IAAI;MAAEE,QAAQ,EAAEY,IAAI,CAACC,GAAG,CAACb,QAAQ,EAAE,CAAC;IAAE,CAAC,GAAGF,IACzE,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMgB,SAAS,GAAGA,CAAA,KAAM;IACtBxB,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;;EAED;EACA,MAAMyB,QAAQ,GAAG,MAAOC,YAAY,IAAK;IACvC,MAAMC,YAAY,GAAG;MACnBC,KAAK,EAAE7B,IAAI,CAACkB,GAAG,CAACT,IAAI,KAAK;QACvBqB,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAAE;QAC/BZ,SAAS,EAAEX,IAAI,CAACO,EAAE;QAClBiB,IAAI,EAAExB,IAAI,CAACwB,IAAI;QACfC,KAAK,EAAEzB,IAAI,CAACyB,KAAK;QACjBxB,KAAK,EAAED,IAAI,CAACC,KAAK;QACjBC,QAAQ,EAAEF,IAAI,CAACE;MACjB,CAAC,CAAC,CAAC;MACHT,WAAW,EAAEA,WAAW,CAACiC,OAAO,CAAC,CAAC,CAAC;MACnC/B,cAAc;MACdgC,SAAS,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;IACpC,CAAC;IAED,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAM/C,KAAK,CAACgD,IAAI,CAAC,gCAAgC,EAAEX,YAAY,CAAC;MACjF,IAAIU,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAIF,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QACtDf,SAAS,CAAC,CAAC,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,oBACEhD,OAAA,CAACC,WAAW,CAACiD,QAAQ;IACnBC,KAAK,EAAE;MACL5C,IAAI;MACJE,WAAW;MACXE,cAAc;MACdQ,SAAS;MACTO,cAAc;MACdG,kBAAkB;MAClBG,SAAS;MACTpB,iBAAiB;MACjBqB;IACF,CAAE;IAAA5B,QAAA,EAEDA;EAAQ;IAAA+C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjD,GAAA,CAxFWF,YAAY;AAAAoD,EAAA,GAAZpD,YAAY;AAAA,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}