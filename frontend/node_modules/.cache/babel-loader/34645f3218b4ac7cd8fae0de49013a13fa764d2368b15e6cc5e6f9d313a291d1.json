{"ast":null,"code":"var _jsxFileName = \"/Users/srisaibodduluri/Desktop/EWAFinal/Project2/CuisineConnect-main2/frontend/src/Components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css'; // Import the Chat component CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [query, setQuery] = useState(''); // For storing user input\n  const [messages, setMessages] = useState([]); // To store both user and bot messages\n  const [loading, setLoading] = useState(false); // For handling loading state\n  const chatWindowRef = useRef(null); // Ref for the chat window\n\n  // Scroll to the bottom of the chat window when messages are added\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]); // Runs whenever messages are updated\n\n  // Handle form submission\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!query.trim()) return;\n\n  //     // Add the user's query to the chat\n  //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n  //     setLoading(true);\n\n  //     try {\n  //         // Fetch response from the backend\n  //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ query }),\n  //         });\n\n  //         const data = await res.json();\n\n  //         // Parse the response from the backend\n  //         if (data.response) {\n  //             const botMessage = { type: 'bot', text: data.response };\n\n  //             if (data.food_items) {\n  //                 // Create a formatted HTML string for food recommendations\n  //                 const foodItemsHtml = data.food_items.map(item => `\n  //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n  //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n  //                 `).join('<br/>');\n\n  //                 // Add the HTML to the bot's message\n  //                 botMessage.foodItemsHtml = foodItemsHtml;\n  //             }\n\n  //             // Add the bot's response to the chat\n  //             setMessages(prevMessages => [...prevMessages, botMessage]);\n  //         } else {\n  //             // Handle missing response gracefully\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: 'No recommendations or information found.' },\n  //             ]);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error fetching bot response:', error);\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n  //         ]);\n  //     } finally {\n  //         setQuery(''); // Clear input field\n  //         setLoading(false); // Stop loading spinner\n  //     }\n  // };\n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!query.trim()) return;\n\n  //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n  //     setLoading(true);\n\n  //     try {\n  //         // Fetch response from backend\n  //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ query }),\n  //         });\n\n  //         const data = await res.json();\n  //         console.log('Backend response:', data);\n  //         // Extract and handle the response\n  //         if (data.bot_response) {\n  //             const botResponse = data.bot_response\n  //             // typeof data.response === 'string'\n  //             // ? data.response // Use the string directly\n  //             // : JSON.stringify(data.response);\n\n  //             // const botResponse_trim = botResponse.replace('{\"response\":\"', '').replace('\"}', '');\n\n  //             // Add bot response to messages\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: botResponse }\n  //             ]);\n\n  //             // Handle food items if available\n  //             if (data.food_items) {\n  //                 const foodMessage = data.food_items.map(item => `\n  //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n  //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n  //                 `).join('<br/>');\n\n  //                 setMessages(prevMessages => [\n  //                     ...prevMessages,\n  //                     { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n  //                 ]);\n  //             }\n  //         } else {\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: 'No recommendations or information found.' },\n  //             ]);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error fetching bot response:', error);\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n  //         ]);\n  //     } finally {\n  //         setQuery('');\n  //         setLoading(false);\n  //     }\n  // };  \n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!query.trim()) return;\n\n  //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n  //     setLoading(true);\n\n  //     try {\n  //         // Fetch response from backend\n  //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ query }),\n  //         });\n\n  //         const data = await res.json();\n  //         console.log('Backend response:', data);\n\n  //         // Extract the actual bot response text from nested structure\n  //         const botResponse = data.response?.bot_response || 'No recommendations or information found.';\n\n  //         // Add bot response to messages\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: botResponse }\n  //         ]);\n\n  //         // Handle food items if available\n  //         if (data.food_items) {\n  //             const foodMessage = data.food_items.map(item => `\n  //                 <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n  //                 <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n  //             `).join('<br/>');\n\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n  //             ]);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error fetching bot response:', error);\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n  //         ]);\n  //     } finally {\n  //         setQuery('');\n  //         setLoading(false);\n  //     }\n  // };  \n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!query.trim()) return;\n\n    // Add user message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      text: query\n    }]);\n    setLoading(true);\n    try {\n      var _data$response, _data$response2;\n      // Send the query to the backend API\n      const res = await fetch('http://127.0.0.1:5000/api/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const data = await res.json();\n      console.log('Backend response:', data);\n\n      // Extract the bot response\n      const botResponse = ((_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.bot_response) || 'No response from the bot.';\n\n      // Add bot response to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: botResponse\n      }]);\n\n      // Handle and display food items if they exist\n      if ((_data$response2 = data.response) !== null && _data$response2 !== void 0 && _data$response2.food_items) {\n        data.response.food_items.forEach(item => {\n          const foodItem = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"food-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Price:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 28\n              }, this), \" $\", item.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Spice Level:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 28\n              }, this), \" \", item.spiceLevel]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.imageUrl,\n              alt: item.name,\n              className: \"food-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 25\n            }, this)]\n          }, item.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }, this);\n\n          // Add the food item to the chat\n          setMessages(prevMessages => [...prevMessages, {\n            type: 'bot',\n            text: '',\n            foodItem\n          }]);\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: 'Error fetching response. Please try again.'\n      }]);\n    } finally {\n      setQuery(''); // Clear the input field\n      setLoading(false); // Stop loading spinner\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.type === 'user' ? 'user-message' : 'bot-message'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [message.text && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 46\n          }, this), message.foodItemsHtml && /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: message.foodItemsHtml\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 49\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bot-message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Ask me about food, recommendations, or ingredients...\",\n        className: \"chat-input\",\n        disabled: loading // Disable input while loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        disabled: loading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"CIZUeQB18coaFt5dg0R7UAIDLTQ=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","query","setQuery","messages","setMessages","loading","setLoading","chatWindowRef","current","scrollTop","scrollHeight","handleSubmit","e","preventDefault","trim","prevMessages","type","text","_data$response","_data$response2","res","fetch","method","headers","body","JSON","stringify","data","json","console","log","botResponse","response","bot_response","food_items","forEach","item","foodItem","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","description","price","spiceLevel","src","imageUrl","alt","error","ref","map","message","index","foodItemsHtml","dangerouslySetInnerHTML","__html","onSubmit","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/srisaibodduluri/Desktop/EWAFinal/Project2/CuisineConnect-main2/frontend/src/Components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css'; // Import the Chat component CSS\n\nconst Chat = () => {\n    const [query, setQuery] = useState(''); // For storing user input\n    const [messages, setMessages] = useState([]); // To store both user and bot messages\n    const [loading, setLoading] = useState(false); // For handling loading state\n    const chatWindowRef = useRef(null); // Ref for the chat window\n\n    // Scroll to the bottom of the chat window when messages are added\n    useEffect(() => {\n        if (chatWindowRef.current) {\n            chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n        }\n    }, [messages]); // Runs whenever messages are updated\n\n    // Handle form submission\n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n\n    //     if (!query.trim()) return;\n\n    //     // Add the user's query to the chat\n    //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n    //     setLoading(true);\n\n    //     try {\n    //         // Fetch response from the backend\n    //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ query }),\n    //         });\n\n    //         const data = await res.json();\n\n    //         // Parse the response from the backend\n    //         if (data.response) {\n    //             const botMessage = { type: 'bot', text: data.response };\n\n    //             if (data.food_items) {\n    //                 // Create a formatted HTML string for food recommendations\n    //                 const foodItemsHtml = data.food_items.map(item => `\n    //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n    //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n    //                 `).join('<br/>');\n                    \n    //                 // Add the HTML to the bot's message\n    //                 botMessage.foodItemsHtml = foodItemsHtml;\n    //             }\n\n    //             // Add the bot's response to the chat\n    //             setMessages(prevMessages => [...prevMessages, botMessage]);\n    //         } else {\n    //             // Handle missing response gracefully\n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: 'No recommendations or information found.' },\n    //             ]);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error fetching bot response:', error);\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n    //         ]);\n    //     } finally {\n    //         setQuery(''); // Clear input field\n    //         setLoading(false); // Stop loading spinner\n    //     }\n    // };\n\n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n    \n    //     if (!query.trim()) return;\n    \n    //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n    //     setLoading(true);\n    \n    //     try {\n    //         // Fetch response from backend\n    //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ query }),\n    //         });\n    \n    //         const data = await res.json();\n    //         console.log('Backend response:', data);\n    //         // Extract and handle the response\n    //         if (data.bot_response) {\n    //             const botResponse = data.bot_response\n    //             // typeof data.response === 'string'\n    //             // ? data.response // Use the string directly\n    //             // : JSON.stringify(data.response);\n                \n    //             // const botResponse_trim = botResponse.replace('{\"response\":\"', '').replace('\"}', '');\n\n    //             // Add bot response to messages\n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: botResponse }\n    //             ]);\n    \n    //             // Handle food items if available\n    //             if (data.food_items) {\n    //                 const foodMessage = data.food_items.map(item => `\n    //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n    //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n    //                 `).join('<br/>');\n    \n    //                 setMessages(prevMessages => [\n    //                     ...prevMessages,\n    //                     { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n    //                 ]);\n    //             }\n    //         } else {\n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: 'No recommendations or information found.' },\n    //             ]);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error fetching bot response:', error);\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n    //         ]);\n    //     } finally {\n    //         setQuery('');\n    //         setLoading(false);\n    //     }\n    // };  \n    \n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n    \n    //     if (!query.trim()) return;\n    \n    //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n    //     setLoading(true);\n    \n    //     try {\n    //         // Fetch response from backend\n    //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ query }),\n    //         });\n    \n    //         const data = await res.json();\n    //         console.log('Backend response:', data);\n    \n    //         // Extract the actual bot response text from nested structure\n    //         const botResponse = data.response?.bot_response || 'No recommendations or information found.';\n    \n    //         // Add bot response to messages\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: botResponse }\n    //         ]);\n    \n    //         // Handle food items if available\n    //         if (data.food_items) {\n    //             const foodMessage = data.food_items.map(item => `\n    //                 <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n    //                 <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n    //             `).join('<br/>');\n    \n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n    //             ]);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error fetching bot response:', error);\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n    //         ]);\n    //     } finally {\n    //         setQuery('');\n    //         setLoading(false);\n    //     }\n    // };  \n    \n    const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!query.trim()) return;\n\n    // Add user message to the chat\n    setMessages((prevMessages) => [...prevMessages, { type: 'user', text: query }]);\n    setLoading(true);\n\n    try {\n        // Send the query to the backend API\n        const res = await fetch('http://127.0.0.1:5000/api/query', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query }),\n        });\n\n        const data = await res.json();\n        console.log('Backend response:', data);\n\n        // Extract the bot response\n        const botResponse = data.response?.bot_response || 'No response from the bot.';\n        \n        // Add bot response to the chat\n        setMessages((prevMessages) => [\n            ...prevMessages,\n            { type: 'bot', text: botResponse },\n        ]);\n\n        // Handle and display food items if they exist\n        if (data.response?.food_items) {\n            data.response.food_items.forEach(item => {\n                const foodItem = (\n                    <div key={item.name} className=\"food-item\">\n                        <h4>{item.name}</h4>\n                        <p>{item.description}</p>\n                        <p><strong>Price:</strong> ${item.price}</p>\n                        <p><strong>Spice Level:</strong> {item.spiceLevel}</p>\n                        <img src={item.imageUrl} alt={item.name} className=\"food-image\" />\n                    </div>\n                );\n\n                // Add the food item to the chat\n                setMessages((prevMessages) => [\n                    ...prevMessages,\n                    { type: 'bot', text: '', foodItem },\n                ]);\n            });\n        }\n    } catch (error) {\n        console.error('Error fetching bot response:', error);\n        setMessages((prevMessages) => [\n            ...prevMessages,\n            { type: 'bot', text: 'Error fetching response. Please try again.' },\n        ]);\n    } finally {\n        setQuery(''); // Clear the input field\n        setLoading(false); // Stop loading spinner\n    }\n};\n\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-window\" ref={chatWindowRef}>\n                {messages.map((message, index) => (\n                    <div\n                        key={index}\n                        className={`chat-message ${\n                            message.type === 'user' ? 'user-message' : 'bot-message'\n                        }`}\n                    >\n                                                <div className=\"message-content\">\n                            {message.text && <p>{message.text}</p>}\n                            {/* Display the food items HTML if available */}\n                            {message.foodItemsHtml && (\n                                <div dangerouslySetInnerHTML={{ __html: message.foodItemsHtml }} />\n                            )}\n                        </div>\n\n                    </div>\n                ))}\n                {loading && (\n                    <div className=\"bot-message\">\n                        <div className=\"message-content\">Bot is typing...</div>\n                    </div>\n                )}\n            </div>\n            <form onSubmit={handleSubmit} className=\"chat-input-container\">\n                <input\n                    type=\"text\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    placeholder=\"Ask me about food, recommendations, or ingredients...\"\n                    className=\"chat-input\"\n                    disabled={loading} // Disable input while loading\n                />\n                <button type=\"submit\" className=\"send-button\" disabled={loading}>\n                    Send\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}