{"ast":null,"code":"var _jsxFileName = \"/Users/srisaibodduluri/Desktop/EWAFinal/Project2/CuisineConnect-main2/frontend/src/Components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css'; // Import the Chat component CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [query, setQuery] = useState(''); // For storing user input\n  const [messages, setMessages] = useState([]); // To store both user and bot messages\n  const [loading, setLoading] = useState(false); // For handling loading state\n  const chatWindowRef = useRef(null); // Ref for the chat window\n\n  // Scroll to the bottom of the chat window when messages are added\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]); // Runs whenever messages are updated\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!query.trim()) return;\n    setMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      text: query\n    }]);\n    setLoading(true);\n    try {\n      var _data$response, _data$response2;\n      // Fetch response from the backend\n      const res = await fetch('http://127.0.0.1:5000/api/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const data = await res.json();\n      console.log('Backend response:', data);\n\n      // Dynamically handle different response structures\n      const botResponse = ((_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.bot_response) || ((_data$response2 = data.response) === null || _data$response2 === void 0 ? void 0 : _data$response2.response);\n\n      // Add the bot response to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: botResponse\n      }]);\n\n      // Handle food items if available\n      if (data.food_items) {\n        const foodItemsHtml = data.food_items.map(item => `\n                    <div class=\"food-item\">\n                        <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n                        <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n                    </div>\n                `).join('');\n        setMessages(prevMessages => [...prevMessages, {\n          type: 'bot',\n          text: botResponse,\n          foodItemsHtml\n        }]);\n      }\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: 'Error fetching response. Please try again.'\n      }]);\n    } finally {\n      setQuery(''); // Clear the input field\n      setLoading(false); // Stop loading spinner\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), message.foodItemsHtml && /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: message.foodItemsHtml\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Type your query...\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"CIZUeQB18coaFt5dg0R7UAIDLTQ=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","query","setQuery","messages","setMessages","loading","setLoading","chatWindowRef","current","scrollTop","scrollHeight","handleSubmit","e","preventDefault","trim","prevMessages","type","text","_data$response","_data$response2","res","fetch","method","headers","body","JSON","stringify","data","json","console","log","botResponse","response","bot_response","food_items","foodItemsHtml","map","item","name","description","price","spiceLevel","imageUrl","join","error","className","children","ref","message","index","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","onSubmit","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/srisaibodduluri/Desktop/EWAFinal/Project2/CuisineConnect-main2/frontend/src/Components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css'; // Import the Chat component CSS\n\nconst Chat = () => {\n    const [query, setQuery] = useState(''); // For storing user input\n    const [messages, setMessages] = useState([]); // To store both user and bot messages\n    const [loading, setLoading] = useState(false); // For handling loading state\n    const chatWindowRef = useRef(null); // Ref for the chat window\n\n    // Scroll to the bottom of the chat window when messages are added\n    useEffect(() => {\n        if (chatWindowRef.current) {\n            chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n        }\n    }, [messages]); // Runs whenever messages are updated\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n    \n        if (!query.trim()) return;\n    \n        setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n        setLoading(true);\n    \n        try {\n            // Fetch response from the backend\n            const res = await fetch('http://127.0.0.1:5000/api/query', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ query }),\n            });\n    \n            const data = await res.json();\n            console.log('Backend response:', data);\n    \n            // Dynamically handle different response structures\n            const botResponse = \n                data.response?.bot_response ||\n                data.response?.response\n    \n            // Add the bot response to the chat\n            setMessages(prevMessages => [\n                ...prevMessages,\n                { type: 'bot', text: botResponse }\n            ]);\n    \n            // Handle food items if available\n            if (data.food_items) {\n                const foodItemsHtml = data.food_items.map(item => `\n                    <div class=\"food-item\">\n                        <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n                        <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n                    </div>\n                `).join('');\n    \n                setMessages(prevMessages => [\n                    ...prevMessages,\n                    { type: 'bot', text: botResponse, foodItemsHtml }\n                ]);\n            }\n        } catch (error) {\n            console.error('Error fetching bot response:', error);\n            setMessages(prevMessages => [\n                ...prevMessages,\n                { type: 'bot', text: 'Error fetching response. Please try again.' },\n            ]);\n        } finally {\n            setQuery(''); // Clear the input field\n            setLoading(false); // Stop loading spinner\n        }\n    };\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-window\" ref={chatWindowRef}>\n                {messages.map((message, index) => (\n                    <div key={index} className={`message ${message.type}`}>\n                        <p>{message.text}</p>\n                        {message.foodItemsHtml && (\n                            <div\n                                dangerouslySetInnerHTML={{ __html: message.foodItemsHtml }}\n                            />\n                        )}\n                    </div>\n                ))}\n                {loading && <div className=\"loading\">Loading...</div>}\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"chat-form\">\n                <input\n                    type=\"text\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    placeholder=\"Type your query...\"\n                    disabled={loading}\n                />\n                <button type=\"submit\" disabled={loading}>\n                    Send\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}