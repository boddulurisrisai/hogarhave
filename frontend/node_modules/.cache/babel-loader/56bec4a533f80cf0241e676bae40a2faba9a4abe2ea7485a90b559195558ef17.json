{"ast":null,"code":"var _jsxFileName = \"/Users/srisaibodduluri/Desktop/EWAFinal/Project2/CuisineConnect-main2/frontend/src/Components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css'; // Import the Chat component CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [query, setQuery] = useState(''); // For storing user input\n  const [messages, setMessages] = useState([]); // To store both user and bot messages\n  const [loading, setLoading] = useState(false); // For handling loading state\n  const chatWindowRef = useRef(null); // Ref for the chat window\n\n  // Scroll to the bottom of the chat window when messages are added\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [messages]); // Runs whenever messages are updated\n\n  // Handle form submission\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!query.trim()) return;\n\n  //     // Add the user's query to the chat\n  //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n  //     setLoading(true);\n\n  //     try {\n  //         // Fetch response from the backend\n  //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ query }),\n  //         });\n\n  //         const data = await res.json();\n\n  //         // Parse the response from the backend\n  //         if (data.response) {\n  //             const botMessage = { type: 'bot', text: data.response };\n\n  //             if (data.food_items) {\n  //                 // Create a formatted HTML string for food recommendations\n  //                 const foodItemsHtml = data.food_items.map(item => `\n  //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n  //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n  //                 `).join('<br/>');\n\n  //                 // Add the HTML to the bot's message\n  //                 botMessage.foodItemsHtml = foodItemsHtml;\n  //             }\n\n  //             // Add the bot's response to the chat\n  //             setMessages(prevMessages => [...prevMessages, botMessage]);\n  //         } else {\n  //             // Handle missing response gracefully\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: 'No recommendations or information found.' },\n  //             ]);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error fetching bot response:', error);\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n  //         ]);\n  //     } finally {\n  //         setQuery(''); // Clear input field\n  //         setLoading(false); // Stop loading spinner\n  //     }\n  // };\n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!query.trim()) return;\n\n  //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n  //     setLoading(true);\n\n  //     try {\n  //         // Fetch response from backend\n  //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ query }),\n  //         });\n\n  //         const data = await res.json();\n  //         console.log('Backend response:', data);\n  //         // Extract and handle the response\n  //         if (data.bot_response) {\n  //             const botResponse = data.bot_response\n  //             // typeof data.response === 'string'\n  //             // ? data.response // Use the string directly\n  //             // : JSON.stringify(data.response);\n\n  //             // const botResponse_trim = botResponse.replace('{\"response\":\"', '').replace('\"}', '');\n\n  //             // Add bot response to messages\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: botResponse }\n  //             ]);\n\n  //             // Handle food items if available\n  //             if (data.food_items) {\n  //                 const foodMessage = data.food_items.map(item => `\n  //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n  //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n  //                 `).join('<br/>');\n\n  //                 setMessages(prevMessages => [\n  //                     ...prevMessages,\n  //                     { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n  //                 ]);\n  //             }\n  //         } else {\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: 'No recommendations or information found.' },\n  //             ]);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error fetching bot response:', error);\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n  //         ]);\n  //     } finally {\n  //         setQuery('');\n  //         setLoading(false);\n  //     }\n  // };  \n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n\n  //     if (!query.trim()) return;\n\n  //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n  //     setLoading(true);\n\n  //     try {\n  //         // Fetch response from backend\n  //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ query }),\n  //         });\n\n  //         const data = await res.json();\n  //         console.log('Backend response:', data);\n\n  //         // Extract the actual bot response text from nested structure\n  //         const botResponse = data.response?.bot_response || 'No recommendations or information found.';\n\n  //         // Add bot response to messages\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: botResponse }\n  //         ]);\n\n  //         // Handle food items if available\n  //         if (data.food_items) {\n  //             const foodMessage = data.food_items.map(item => `\n  //                 <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n  //                 <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n  //             `).join('<br/>');\n\n  //             setMessages(prevMessages => [\n  //                 ...prevMessages,\n  //                 { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n  //             ]);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error fetching bot response:', error);\n  //         setMessages(prevMessages => [\n  //             ...prevMessages,\n  //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n  //         ]);\n  //     } finally {\n  //         setQuery('');\n  //         setLoading(false);\n  //     }\n  // };  \n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!query.trim()) return;\n    setMessages(prevMessages => [...prevMessages, {\n      type: 'user',\n      text: query\n    }]);\n    setLoading(true);\n    try {\n      var _data$response, _data$response2, _data$response3, _data$response4;\n      // Fetch response from the backend\n      const res = await fetch('http://127.0.0.1:5000/api/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n\n      // Parse the response as JSON\n      const data = await res.json();\n\n      // Log the full JSON data to the chat (as a string)\n      // setMessages(prevMessages => [\n      //     ...prevMessages,\n      //     { type: 'bot', text: JSON.stringify(data, null, 2) } // Adding the raw JSON response here\n      // ]);\n\n      // Dynamically handle different response structures\n      const botResponse = ((_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.bot_response) || ((_data$response2 = data.response) === null || _data$response2 === void 0 ? void 0 : _data$response2.response);\n\n      // Add the bot response to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: botResponse\n      }]);\n      if ((_data$response3 = data.response) !== null && _data$response3 !== void 0 && _data$response3.orderDetails) {\n        const orderDetailsMessage = `\n                    <strong>Order ID:</strong> ${data.orderDetails.orderId} <br />\n                    <strong>Name:</strong> ${data.orderDetails.firstName} <br />\n                    <strong>Phone:</strong> ${data.orderDetails.phoneNumber} <br />\n                    <strong>Email:</strong> ${data.orderDetails.email} <br />\n                    <strong>Product Name:</strong> ${data.orderDetails.productName} <br />\n                    <strong>Quantity:</strong> ${data.orderDetails.quantity} <br />\n                    <strong>Delivery Address:</strong> ${data.orderDetails.deliveryAddress} <br />\n                    <strong>Credit Card:</strong> ${data.orderDetails.creditCard} <br />\n                    <strong>Status:</strong> ${data.orderDetails.status} <br />\n                `;\n        setMessages(prevMessages => [...prevMessages, {\n          type: 'bot',\n          text: botResponse,\n          orderDetailsHtml: orderDetailsMessage\n        }]);\n      }\n\n      // Handle food items if available\n      if ((_data$response4 = data.response) !== null && _data$response4 !== void 0 && _data$response4.recommendations) {\n        const recommendationsMessage = data.response.recommendations.map(item => `\n                    <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n                    <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n                `).join('<br/>');\n        setMessages(prevMessages => [...prevMessages, {\n          type: 'bot',\n          text: botResponse,\n          recommendationsHtml: recommendationsMessage\n        }]);\n      }\n    } catch (error) {\n      console.error('Error fetching bot response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: 'Error fetching response. Please try again.'\n      }]);\n    } finally {\n      setQuery(''); // Clear the input field\n      setLoading(false); // Stop loading spinner\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.type === 'user' ? 'user-message' : 'bot-message'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [message.text && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 46\n          }, this), message.foodItemsHtml && /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: message.foodItemsHtml\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 33\n          }, this), message.recommendationsHtml && /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: message.recommendationsHtml\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), message.orderDetailsHtml && /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: message.orderDetailsHtml\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 49\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bot-message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Ask me about food, recommendations, or ingredients...\",\n        className: \"chat-input\",\n        disabled: loading // Disable input while loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        disabled: loading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"CIZUeQB18coaFt5dg0R7UAIDLTQ=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","query","setQuery","messages","setMessages","loading","setLoading","chatWindowRef","current","scrollTop","scrollHeight","handleSubmit","e","preventDefault","trim","prevMessages","type","text","_data$response","_data$response2","_data$response3","_data$response4","res","fetch","method","headers","body","JSON","stringify","data","json","botResponse","response","bot_response","orderDetails","orderDetailsMessage","orderId","firstName","phoneNumber","email","productName","quantity","deliveryAddress","creditCard","status","orderDetailsHtml","recommendations","recommendationsMessage","map","item","name","description","price","spiceLevel","imageUrl","join","recommendationsHtml","error","console","className","children","ref","message","index","fileName","_jsxFileName","lineNumber","columnNumber","foodItemsHtml","dangerouslySetInnerHTML","__html","onSubmit","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/srisaibodduluri/Desktop/EWAFinal/Project2/CuisineConnect-main2/frontend/src/Components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css'; // Import the Chat component CSS\n\nconst Chat = () => {\n    const [query, setQuery] = useState(''); // For storing user input\n    const [messages, setMessages] = useState([]); // To store both user and bot messages\n    const [loading, setLoading] = useState(false); // For handling loading state\n    const chatWindowRef = useRef(null); // Ref for the chat window\n\n    // Scroll to the bottom of the chat window when messages are added\n    useEffect(() => {\n        if (chatWindowRef.current) {\n            chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n        }\n    }, [messages]); // Runs whenever messages are updated\n\n    // Handle form submission\n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n\n    //     if (!query.trim()) return;\n\n    //     // Add the user's query to the chat\n    //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n    //     setLoading(true);\n\n    //     try {\n    //         // Fetch response from the backend\n    //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ query }),\n    //         });\n\n    //         const data = await res.json();\n\n    //         // Parse the response from the backend\n    //         if (data.response) {\n    //             const botMessage = { type: 'bot', text: data.response };\n\n    //             if (data.food_items) {\n    //                 // Create a formatted HTML string for food recommendations\n    //                 const foodItemsHtml = data.food_items.map(item => `\n    //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n    //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n    //                 `).join('<br/>');\n                    \n    //                 // Add the HTML to the bot's message\n    //                 botMessage.foodItemsHtml = foodItemsHtml;\n    //             }\n\n    //             // Add the bot's response to the chat\n    //             setMessages(prevMessages => [...prevMessages, botMessage]);\n    //         } else {\n    //             // Handle missing response gracefully\n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: 'No recommendations or information found.' },\n    //             ]);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error fetching bot response:', error);\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n    //         ]);\n    //     } finally {\n    //         setQuery(''); // Clear input field\n    //         setLoading(false); // Stop loading spinner\n    //     }\n    // };\n\n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n    \n    //     if (!query.trim()) return;\n    \n    //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n    //     setLoading(true);\n    \n    //     try {\n    //         // Fetch response from backend\n    //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ query }),\n    //         });\n    \n    //         const data = await res.json();\n    //         console.log('Backend response:', data);\n    //         // Extract and handle the response\n    //         if (data.bot_response) {\n    //             const botResponse = data.bot_response\n    //             // typeof data.response === 'string'\n    //             // ? data.response // Use the string directly\n    //             // : JSON.stringify(data.response);\n                \n    //             // const botResponse_trim = botResponse.replace('{\"response\":\"', '').replace('\"}', '');\n\n    //             // Add bot response to messages\n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: botResponse }\n    //             ]);\n    \n    //             // Handle food items if available\n    //             if (data.food_items) {\n    //                 const foodMessage = data.food_items.map(item => `\n    //                     <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n    //                     <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n    //                 `).join('<br/>');\n    \n    //                 setMessages(prevMessages => [\n    //                     ...prevMessages,\n    //                     { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n    //                 ]);\n    //             }\n    //         } else {\n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: 'No recommendations or information found.' },\n    //             ]);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error fetching bot response:', error);\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n    //         ]);\n    //     } finally {\n    //         setQuery('');\n    //         setLoading(false);\n    //     }\n    // };  \n    \n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n    \n    //     if (!query.trim()) return;\n    \n    //     setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n    //     setLoading(true);\n    \n    //     try {\n    //         // Fetch response from backend\n    //         const res = await fetch('http://127.0.0.1:5000/api/query', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ query }),\n    //         });\n    \n    //         const data = await res.json();\n    //         console.log('Backend response:', data);\n    \n    //         // Extract the actual bot response text from nested structure\n    //         const botResponse = data.response?.bot_response || 'No recommendations or information found.';\n    \n    //         // Add bot response to messages\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: botResponse }\n    //         ]);\n    \n    //         // Handle food items if available\n    //         if (data.food_items) {\n    //             const foodMessage = data.food_items.map(item => `\n    //                 <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n    //                 <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n    //             `).join('<br/>');\n    \n    //             setMessages(prevMessages => [\n    //                 ...prevMessages,\n    //                 { type: 'bot', text: botResponse, foodItemsHtml: foodMessage }\n    //             ]);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error fetching bot response:', error);\n    //         setMessages(prevMessages => [\n    //             ...prevMessages,\n    //             { type: 'bot', text: 'Error fetching response. Please try again.' },\n    //         ]);\n    //     } finally {\n    //         setQuery('');\n    //         setLoading(false);\n    //     }\n    // };  \n    \n    const handleSubmit = async (e) => {\n        e.preventDefault();\n    \n        if (!query.trim()) return;\n    \n        setMessages(prevMessages => [...prevMessages, { type: 'user', text: query }]);\n        setLoading(true);\n    \n        try {\n            // Fetch response from the backend\n            const res = await fetch('http://127.0.0.1:5000/api/query', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ query }),\n            });\n    \n            // Parse the response as JSON\n            const data = await res.json();\n    \n            // Log the full JSON data to the chat (as a string)\n            // setMessages(prevMessages => [\n            //     ...prevMessages,\n            //     { type: 'bot', text: JSON.stringify(data, null, 2) } // Adding the raw JSON response here\n            // ]);\n    \n            // Dynamically handle different response structures\n            const botResponse = \n                data.response?.bot_response ||\n                data.response?.response;\n    \n            // Add the bot response to the chat\n            setMessages(prevMessages => [\n                ...prevMessages,\n                { type: 'bot', text: botResponse }\n            ]);\n\n            if (data.response?.orderDetails) {\n                const orderDetailsMessage = `\n                    <strong>Order ID:</strong> ${data.orderDetails.orderId} <br />\n                    <strong>Name:</strong> ${data.orderDetails.firstName} <br />\n                    <strong>Phone:</strong> ${data.orderDetails.phoneNumber} <br />\n                    <strong>Email:</strong> ${data.orderDetails.email} <br />\n                    <strong>Product Name:</strong> ${data.orderDetails.productName} <br />\n                    <strong>Quantity:</strong> ${data.orderDetails.quantity} <br />\n                    <strong>Delivery Address:</strong> ${data.orderDetails.deliveryAddress} <br />\n                    <strong>Credit Card:</strong> ${data.orderDetails.creditCard} <br />\n                    <strong>Status:</strong> ${data.orderDetails.status} <br />\n                `;\n    \n                setMessages(prevMessages => [\n                    ...prevMessages,\n                    { type: 'bot', text: botResponse, orderDetailsHtml: orderDetailsMessage }\n                ]);\n            }\n\n            // Handle food items if available\n            if (data.response?.recommendations) {\n                const recommendationsMessage = data.response.recommendations.map(item => `\n                    <strong>${item.name}</strong>: ${item.description} - Price: $${item.price} (Spice Level: ${item.spiceLevel})<br/>\n                    <img src=\"${item.imageUrl}\" alt=\"${item.name}\" class=\"food-image\"/>\n                `).join('<br/>');\n            \n                setMessages(prevMessages => [\n                    ...prevMessages,\n                    { type: 'bot', text: botResponse, recommendationsHtml: recommendationsMessage }\n                ]);\n            }\n        } catch (error) {\n            console.error('Error fetching bot response:', error);\n            setMessages(prevMessages => [\n                ...prevMessages,\n                { type: 'bot', text: 'Error fetching response. Please try again.' },\n            ]);\n        } finally {\n            setQuery(''); // Clear the input field\n            setLoading(false); // Stop loading spinner\n        }\n    };\n    \n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-window\" ref={chatWindowRef}>\n                {messages.map((message, index) => (\n                    <div\n                        key={index}\n                        className={`chat-message ${\n                            message.type === 'user' ? 'user-message' : 'bot-message'\n                        }`}\n                    >\n                                                <div className=\"message-content\">\n                            {message.text && <p>{message.text}</p>}\n                            {/* Display the food items HTML if available */}\n                            {message.foodItemsHtml && (\n                                <div dangerouslySetInnerHTML={{ __html: message.foodItemsHtml }} />\n                            )}\n                            {message.recommendationsHtml && (\n                        <div dangerouslySetInnerHTML={{ __html: message.recommendationsHtml }} />\n                    )}\n                            {message.orderDetailsHtml && (\n                        <div dangerouslySetInnerHTML={{ __html: message.orderDetailsHtml }} />\n                    )}\n                        </div>\n\n                    </div>\n                ))}\n                {loading && (\n                    <div className=\"bot-message\">\n                        <div className=\"message-content\">Bot is typing...</div>\n                    </div>\n                )}\n            </div>\n            <form onSubmit={handleSubmit} className=\"chat-input-container\">\n                <input\n                    type=\"text\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    placeholder=\"Ask me about food, recommendations, or ingredients...\"\n                    className=\"chat-input\"\n                    disabled={loading} // Disable input while loading\n                />\n                <button type=\"submit\" className=\"send-button\" disabled={loading}>\n                    Send\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}