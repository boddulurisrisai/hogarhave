{"ast":null,"code":"var _jsxFileName = \"/Users/srisaibodduluri/Desktop/EWA/A20527035_Assignment1/demo1/src/pages/SalesmanDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header'; // Assuming you have a Header component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SalesmanDashboard() {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [formFields, setFormFields] = useState({\n    customerName: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n    email: '',\n    address: ''\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Load customers from localStorage when the component mounts\n  useEffect(() => {\n    const savedCustomers = JSON.parse(localStorage.getItem('customers')) || [];\n    setCustomers(savedCustomers);\n  }, []);\n\n  // Handle form field changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormFields({\n      ...formFields,\n      [name]: value\n    });\n  };\n\n  // Function to validate and add a customer\n  const addCustomer = () => {\n    const {\n      customerName,\n      username,\n      password,\n      confirmPassword,\n      email,\n      address\n    } = formFields;\n    if (password !== confirmPassword) {\n      setError('Passwords do not match!');\n      setSuccess('');\n      return;\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      setError('Invalid email format!');\n      setSuccess('');\n      return;\n    }\n    if (username.length < 5 || password.length < 6) {\n      setError('Username must be at least 5 characters and password at least 6 characters long!');\n      setSuccess('');\n      return;\n    }\n    if (customerName.trim() && username.trim() && email.trim() && address.trim()) {\n      const newCustomer = {\n        id: Date.now(),\n        customerName,\n        username,\n        password,\n        email,\n        address\n      };\n      const updatedCustomers = [...customers, newCustomer];\n      setCustomers(updatedCustomers);\n\n      // Save updated customers to localStorage\n      localStorage.setItem('customers', JSON.stringify(updatedCustomers));\n\n      // Clear form fields\n      setFormFields({\n        customerName: '',\n        username: '',\n        password: '',\n        confirmPassword: '',\n        email: '',\n        address: ''\n      });\n      setError('');\n      setSuccess('Customer added successfully!');\n    } else {\n      setError('All fields are required!');\n      setSuccess('');\n    }\n  };\n\n  // Function to delete a customer\n  const deleteCustomer = customerId => {\n    const updatedCustomers = customers.filter(customer => customer.id !== customerId);\n    setCustomers(updatedCustomers);\n\n    // Save updated customers to localStorage\n    localStorage.setItem('customers', JSON.stringify(updatedCustomers));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Salesman Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customer-management\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create Customer Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"success-message\",\n          children: success\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Customer Name\",\n          name: \"customerName\",\n          value: formFields.customerName,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          name: \"username\",\n          value: formFields.username,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email Address\",\n          name: \"email\",\n          value: formFields.email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          name: \"password\",\n          value: formFields.password,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Confirm Password\",\n          name: \"confirmPassword\",\n          value: formFields.confirmPassword,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Address\",\n          name: \"address\",\n          value: formFields.address,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addCustomer,\n          children: \"Add Customer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: customers.map(customer => /*#__PURE__*/_jsxDEV(CustomerItem, {\n            customer: customer,\n            deleteCustomer: deleteCustomer\n          }, customer.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// Modularized Customer Item component\n_s(SalesmanDashboard, \"A7imaELxJJ+JXVlqpqo0nfoiZ5E=\");\n_c = SalesmanDashboard;\nfunction CustomerItem({\n  customer,\n  deleteCustomer\n}) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [customer.customerName, \" - \", customer.username, \" - \", customer.email, \" - \", customer.address, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => deleteCustomer(customer.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_c2 = CustomerItem;\nexport default SalesmanDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"SalesmanDashboard\");\n$RefreshReg$(_c2, \"CustomerItem\");","map":{"version":3,"names":["React","useState","useEffect","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","SalesmanDashboard","_s","customers","setCustomers","formFields","setFormFields","customerName","username","password","confirmPassword","email","address","error","setError","success","setSuccess","savedCustomers","JSON","parse","localStorage","getItem","handleInputChange","e","name","value","target","addCustomer","emailRegex","test","length","trim","newCustomer","id","Date","now","updatedCustomers","setItem","stringify","deleteCustomer","customerId","filter","customer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onChange","onClick","map","CustomerItem","_c","_c2","$RefreshReg$"],"sources":["/Users/srisaibodduluri/Desktop/EWA/A20527035_Assignment1/demo1/src/pages/SalesmanDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Header from '../components/Header'; // Assuming you have a Header component\n\nfunction SalesmanDashboard() {\n  const [customers, setCustomers] = useState([]);\n  const [formFields, setFormFields] = useState({\n    customerName: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n    email: '',\n    address: '',\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Load customers from localStorage when the component mounts\n  useEffect(() => {\n    const savedCustomers = JSON.parse(localStorage.getItem('customers')) || [];\n    setCustomers(savedCustomers);\n  }, []);\n\n  // Handle form field changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  // Function to validate and add a customer\n  const addCustomer = () => {\n    const { customerName, username, password, confirmPassword, email, address } = formFields;\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match!');\n      setSuccess('');\n      return;\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      setError('Invalid email format!');\n      setSuccess('');\n      return;\n    }\n\n    if (username.length < 5 || password.length < 6) {\n      setError('Username must be at least 5 characters and password at least 6 characters long!');\n      setSuccess('');\n      return;\n    }\n\n    if (customerName.trim() && username.trim() && email.trim() && address.trim()) {\n      const newCustomer = {\n        id: Date.now(),\n        customerName,\n        username,\n        password,\n        email,\n        address,\n      };\n\n      const updatedCustomers = [...customers, newCustomer];\n      setCustomers(updatedCustomers);\n\n      // Save updated customers to localStorage\n      localStorage.setItem('customers', JSON.stringify(updatedCustomers));\n\n      // Clear form fields\n      setFormFields({\n        customerName: '',\n        username: '',\n        password: '',\n        confirmPassword: '',\n        email: '',\n        address: '',\n      });\n      setError('');\n      setSuccess('Customer added successfully!');\n    } else {\n      setError('All fields are required!');\n      setSuccess('');\n    }\n  };\n\n  // Function to delete a customer\n  const deleteCustomer = (customerId) => {\n    const updatedCustomers = customers.filter((customer) => customer.id !== customerId);\n    setCustomers(updatedCustomers);\n\n    // Save updated customers to localStorage\n    localStorage.setItem('customers', JSON.stringify(updatedCustomers));\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"dashboard\">\n        <h2>Salesman Dashboard</h2>\n\n        {/* Customer Management Section */}\n        <div className=\"customer-management\">\n          <h3>Create Customer Account</h3>\n\n          {error && <p className=\"error-message\">{error}</p>}\n          {success && <p className=\"success-message\">{success}</p>}\n\n          <input\n            type=\"text\"\n            placeholder=\"Customer Name\"\n            name=\"customerName\"\n            value={formFields.customerName}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            name=\"username\"\n            value={formFields.username}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={formFields.email}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={formFields.password}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"confirmPassword\"\n            value={formFields.confirmPassword}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Address\"\n            name=\"address\"\n            value={formFields.address}\n            onChange={handleInputChange}\n          />\n          <button onClick={addCustomer}>Add Customer</button>\n\n          {/* Display list of customers */}\n          <ul>\n            {customers.map((customer) => (\n              <CustomerItem\n                key={customer.id}\n                customer={customer}\n                deleteCustomer={deleteCustomer}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n}\n\n// Modularized Customer Item component\nfunction CustomerItem({ customer, deleteCustomer }) {\n  return (\n    <li>\n      {customer.customerName} - {customer.username} - {customer.email} - {customer.address}\n      <button onClick={() => deleteCustomer(customer.id)}>Delete</button>\n    </li>\n  );\n}\n\nexport default SalesmanDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}